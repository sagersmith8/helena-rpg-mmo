/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 13.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CharacterSkills,
} from '../models/index';
import {
    CharacterSkillsFromJSON,
    CharacterSkillsToJSON,
} from '../models/index';

export interface CharacterSkillsDeleteRequest {
    characterId?: string;
    skillId?: string;
    level?: string;
    experience?: string;
    prefer?: CharacterSkillsDeletePreferEnum;
}

export interface CharacterSkillsGetRequest {
    characterId?: string;
    skillId?: string;
    level?: string;
    experience?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: CharacterSkillsGetPreferEnum;
}

export interface CharacterSkillsPatchRequest {
    characterId?: string;
    skillId?: string;
    level?: string;
    experience?: string;
    prefer?: CharacterSkillsPatchPreferEnum;
    characterSkills?: CharacterSkills;
}

export interface CharacterSkillsPostRequest {
    select?: string;
    prefer?: CharacterSkillsPostPreferEnum;
    characterSkills?: CharacterSkills;
}

/**
 * 
 */
export class CharacterSkillsApi extends runtime.BaseAPI {

    /**
     */
    async characterSkillsDeleteRaw(requestParameters: CharacterSkillsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['characterId'] != null) {
            queryParameters['character_id'] = requestParameters['characterId'];
        }

        if (requestParameters['skillId'] != null) {
            queryParameters['skill_id'] = requestParameters['skillId'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['experience'] != null) {
            queryParameters['experience'] = requestParameters['experience'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/character_skills`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async characterSkillsDelete(requestParameters: CharacterSkillsDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.characterSkillsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async characterSkillsGetRaw(requestParameters: CharacterSkillsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CharacterSkills>>> {
        const queryParameters: any = {};

        if (requestParameters['characterId'] != null) {
            queryParameters['character_id'] = requestParameters['characterId'];
        }

        if (requestParameters['skillId'] != null) {
            queryParameters['skill_id'] = requestParameters['skillId'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['experience'] != null) {
            queryParameters['experience'] = requestParameters['experience'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/character_skills`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CharacterSkillsFromJSON));
    }

    /**
     */
    async characterSkillsGet(requestParameters: CharacterSkillsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CharacterSkills> | null | undefined > {
        const response = await this.characterSkillsGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async characterSkillsPatchRaw(requestParameters: CharacterSkillsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['characterId'] != null) {
            queryParameters['character_id'] = requestParameters['characterId'];
        }

        if (requestParameters['skillId'] != null) {
            queryParameters['skill_id'] = requestParameters['skillId'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['experience'] != null) {
            queryParameters['experience'] = requestParameters['experience'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/character_skills`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CharacterSkillsToJSON(requestParameters['characterSkills']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async characterSkillsPatch(requestParameters: CharacterSkillsPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.characterSkillsPatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async characterSkillsPostRaw(requestParameters: CharacterSkillsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/character_skills`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CharacterSkillsToJSON(requestParameters['characterSkills']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async characterSkillsPost(requestParameters: CharacterSkillsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.characterSkillsPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const CharacterSkillsDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type CharacterSkillsDeletePreferEnum = typeof CharacterSkillsDeletePreferEnum[keyof typeof CharacterSkillsDeletePreferEnum];
/**
 * @export
 */
export const CharacterSkillsGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type CharacterSkillsGetPreferEnum = typeof CharacterSkillsGetPreferEnum[keyof typeof CharacterSkillsGetPreferEnum];
/**
 * @export
 */
export const CharacterSkillsPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type CharacterSkillsPatchPreferEnum = typeof CharacterSkillsPatchPreferEnum[keyof typeof CharacterSkillsPatchPreferEnum];
/**
 * @export
 */
export const CharacterSkillsPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type CharacterSkillsPostPreferEnum = typeof CharacterSkillsPostPreferEnum[keyof typeof CharacterSkillsPostPreferEnum];
