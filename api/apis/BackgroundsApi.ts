/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 13.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Backgrounds,
} from '../models/index';
import {
    BackgroundsFromJSON,
    BackgroundsToJSON,
} from '../models/index';

export interface BackgroundsDeleteRequest {
    id?: string;
    name?: string;
    description?: string;
    bonusSpeed?: string;
    bonusHealth?: string;
    bonusMana?: string;
    bonusStrength?: string;
    bonusDexterity?: string;
    bonusIntelligence?: string;
    bonusCharisma?: string;
    bonusWisdom?: string;
    bonusConstitution?: string;
    bonusSkill?: string;
    prefer?: BackgroundsDeletePreferEnum;
}

export interface BackgroundsGetRequest {
    id?: string;
    name?: string;
    description?: string;
    bonusSpeed?: string;
    bonusHealth?: string;
    bonusMana?: string;
    bonusStrength?: string;
    bonusDexterity?: string;
    bonusIntelligence?: string;
    bonusCharisma?: string;
    bonusWisdom?: string;
    bonusConstitution?: string;
    bonusSkill?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: BackgroundsGetPreferEnum;
}

export interface BackgroundsPatchRequest {
    id?: string;
    name?: string;
    description?: string;
    bonusSpeed?: string;
    bonusHealth?: string;
    bonusMana?: string;
    bonusStrength?: string;
    bonusDexterity?: string;
    bonusIntelligence?: string;
    bonusCharisma?: string;
    bonusWisdom?: string;
    bonusConstitution?: string;
    bonusSkill?: string;
    prefer?: BackgroundsPatchPreferEnum;
    backgrounds?: Backgrounds;
}

export interface BackgroundsPostRequest {
    select?: string;
    prefer?: BackgroundsPostPreferEnum;
    backgrounds?: Backgrounds;
}

/**
 * 
 */
export class BackgroundsApi extends runtime.BaseAPI {

    /**
     */
    async backgroundsDeleteRaw(requestParameters: BackgroundsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['bonusSpeed'] != null) {
            queryParameters['bonus_speed'] = requestParameters['bonusSpeed'];
        }

        if (requestParameters['bonusHealth'] != null) {
            queryParameters['bonus_health'] = requestParameters['bonusHealth'];
        }

        if (requestParameters['bonusMana'] != null) {
            queryParameters['bonus_mana'] = requestParameters['bonusMana'];
        }

        if (requestParameters['bonusStrength'] != null) {
            queryParameters['bonus_strength'] = requestParameters['bonusStrength'];
        }

        if (requestParameters['bonusDexterity'] != null) {
            queryParameters['bonus_dexterity'] = requestParameters['bonusDexterity'];
        }

        if (requestParameters['bonusIntelligence'] != null) {
            queryParameters['bonus_intelligence'] = requestParameters['bonusIntelligence'];
        }

        if (requestParameters['bonusCharisma'] != null) {
            queryParameters['bonus_charisma'] = requestParameters['bonusCharisma'];
        }

        if (requestParameters['bonusWisdom'] != null) {
            queryParameters['bonus_wisdom'] = requestParameters['bonusWisdom'];
        }

        if (requestParameters['bonusConstitution'] != null) {
            queryParameters['bonus_constitution'] = requestParameters['bonusConstitution'];
        }

        if (requestParameters['bonusSkill'] != null) {
            queryParameters['bonus_skill'] = requestParameters['bonusSkill'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/backgrounds`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async backgroundsDelete(requestParameters: BackgroundsDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backgroundsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async backgroundsGetRaw(requestParameters: BackgroundsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Backgrounds>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['bonusSpeed'] != null) {
            queryParameters['bonus_speed'] = requestParameters['bonusSpeed'];
        }

        if (requestParameters['bonusHealth'] != null) {
            queryParameters['bonus_health'] = requestParameters['bonusHealth'];
        }

        if (requestParameters['bonusMana'] != null) {
            queryParameters['bonus_mana'] = requestParameters['bonusMana'];
        }

        if (requestParameters['bonusStrength'] != null) {
            queryParameters['bonus_strength'] = requestParameters['bonusStrength'];
        }

        if (requestParameters['bonusDexterity'] != null) {
            queryParameters['bonus_dexterity'] = requestParameters['bonusDexterity'];
        }

        if (requestParameters['bonusIntelligence'] != null) {
            queryParameters['bonus_intelligence'] = requestParameters['bonusIntelligence'];
        }

        if (requestParameters['bonusCharisma'] != null) {
            queryParameters['bonus_charisma'] = requestParameters['bonusCharisma'];
        }

        if (requestParameters['bonusWisdom'] != null) {
            queryParameters['bonus_wisdom'] = requestParameters['bonusWisdom'];
        }

        if (requestParameters['bonusConstitution'] != null) {
            queryParameters['bonus_constitution'] = requestParameters['bonusConstitution'];
        }

        if (requestParameters['bonusSkill'] != null) {
            queryParameters['bonus_skill'] = requestParameters['bonusSkill'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/backgrounds`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BackgroundsFromJSON));
    }

    /**
     */
    async backgroundsGet(requestParameters: BackgroundsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Backgrounds> | null | undefined > {
        const response = await this.backgroundsGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async backgroundsPatchRaw(requestParameters: BackgroundsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['bonusSpeed'] != null) {
            queryParameters['bonus_speed'] = requestParameters['bonusSpeed'];
        }

        if (requestParameters['bonusHealth'] != null) {
            queryParameters['bonus_health'] = requestParameters['bonusHealth'];
        }

        if (requestParameters['bonusMana'] != null) {
            queryParameters['bonus_mana'] = requestParameters['bonusMana'];
        }

        if (requestParameters['bonusStrength'] != null) {
            queryParameters['bonus_strength'] = requestParameters['bonusStrength'];
        }

        if (requestParameters['bonusDexterity'] != null) {
            queryParameters['bonus_dexterity'] = requestParameters['bonusDexterity'];
        }

        if (requestParameters['bonusIntelligence'] != null) {
            queryParameters['bonus_intelligence'] = requestParameters['bonusIntelligence'];
        }

        if (requestParameters['bonusCharisma'] != null) {
            queryParameters['bonus_charisma'] = requestParameters['bonusCharisma'];
        }

        if (requestParameters['bonusWisdom'] != null) {
            queryParameters['bonus_wisdom'] = requestParameters['bonusWisdom'];
        }

        if (requestParameters['bonusConstitution'] != null) {
            queryParameters['bonus_constitution'] = requestParameters['bonusConstitution'];
        }

        if (requestParameters['bonusSkill'] != null) {
            queryParameters['bonus_skill'] = requestParameters['bonusSkill'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/backgrounds`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BackgroundsToJSON(requestParameters['backgrounds']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async backgroundsPatch(requestParameters: BackgroundsPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backgroundsPatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async backgroundsPostRaw(requestParameters: BackgroundsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/backgrounds`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BackgroundsToJSON(requestParameters['backgrounds']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async backgroundsPost(requestParameters: BackgroundsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backgroundsPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const BackgroundsDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type BackgroundsDeletePreferEnum = typeof BackgroundsDeletePreferEnum[keyof typeof BackgroundsDeletePreferEnum];
/**
 * @export
 */
export const BackgroundsGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type BackgroundsGetPreferEnum = typeof BackgroundsGetPreferEnum[keyof typeof BackgroundsGetPreferEnum];
/**
 * @export
 */
export const BackgroundsPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type BackgroundsPatchPreferEnum = typeof BackgroundsPatchPreferEnum[keyof typeof BackgroundsPatchPreferEnum];
/**
 * @export
 */
export const BackgroundsPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type BackgroundsPostPreferEnum = typeof BackgroundsPostPreferEnum[keyof typeof BackgroundsPostPreferEnum];
