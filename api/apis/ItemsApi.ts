/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 13.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Items,
} from '../models/index';
import {
    ItemsFromJSON,
    ItemsToJSON,
} from '../models/index';

export interface ItemsDeleteRequest {
    id?: string;
    name?: string;
    description?: string;
    type?: string;
    mana?: string;
    equipmentSlot?: string;
    tier?: string;
    weight?: string;
    goldValue?: string;
    image?: string;
    prefer?: ItemsDeletePreferEnum;
}

export interface ItemsGetRequest {
    id?: string;
    name?: string;
    description?: string;
    type?: string;
    mana?: string;
    equipmentSlot?: string;
    tier?: string;
    weight?: string;
    goldValue?: string;
    image?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: ItemsGetPreferEnum;
}

export interface ItemsPatchRequest {
    id?: string;
    name?: string;
    description?: string;
    type?: string;
    mana?: string;
    equipmentSlot?: string;
    tier?: string;
    weight?: string;
    goldValue?: string;
    image?: string;
    prefer?: ItemsPatchPreferEnum;
    items?: Items;
}

export interface ItemsPostRequest {
    select?: string;
    prefer?: ItemsPostPreferEnum;
    items?: Items;
}

/**
 * 
 */
export class ItemsApi extends runtime.BaseAPI {

    /**
     */
    async itemsDeleteRaw(requestParameters: ItemsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['mana'] != null) {
            queryParameters['mana'] = requestParameters['mana'];
        }

        if (requestParameters['equipmentSlot'] != null) {
            queryParameters['equipment_slot'] = requestParameters['equipmentSlot'];
        }

        if (requestParameters['tier'] != null) {
            queryParameters['tier'] = requestParameters['tier'];
        }

        if (requestParameters['weight'] != null) {
            queryParameters['weight'] = requestParameters['weight'];
        }

        if (requestParameters['goldValue'] != null) {
            queryParameters['gold_value'] = requestParameters['goldValue'];
        }

        if (requestParameters['image'] != null) {
            queryParameters['image'] = requestParameters['image'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/items`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async itemsDelete(requestParameters: ItemsDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.itemsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async itemsGetRaw(requestParameters: ItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Items>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['mana'] != null) {
            queryParameters['mana'] = requestParameters['mana'];
        }

        if (requestParameters['equipmentSlot'] != null) {
            queryParameters['equipment_slot'] = requestParameters['equipmentSlot'];
        }

        if (requestParameters['tier'] != null) {
            queryParameters['tier'] = requestParameters['tier'];
        }

        if (requestParameters['weight'] != null) {
            queryParameters['weight'] = requestParameters['weight'];
        }

        if (requestParameters['goldValue'] != null) {
            queryParameters['gold_value'] = requestParameters['goldValue'];
        }

        if (requestParameters['image'] != null) {
            queryParameters['image'] = requestParameters['image'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/items`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ItemsFromJSON));
    }

    /**
     */
    async itemsGet(requestParameters: ItemsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Items> | null | undefined > {
        const response = await this.itemsGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async itemsPatchRaw(requestParameters: ItemsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['mana'] != null) {
            queryParameters['mana'] = requestParameters['mana'];
        }

        if (requestParameters['equipmentSlot'] != null) {
            queryParameters['equipment_slot'] = requestParameters['equipmentSlot'];
        }

        if (requestParameters['tier'] != null) {
            queryParameters['tier'] = requestParameters['tier'];
        }

        if (requestParameters['weight'] != null) {
            queryParameters['weight'] = requestParameters['weight'];
        }

        if (requestParameters['goldValue'] != null) {
            queryParameters['gold_value'] = requestParameters['goldValue'];
        }

        if (requestParameters['image'] != null) {
            queryParameters['image'] = requestParameters['image'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/items`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ItemsToJSON(requestParameters['items']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async itemsPatch(requestParameters: ItemsPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.itemsPatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async itemsPostRaw(requestParameters: ItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/items`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemsToJSON(requestParameters['items']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async itemsPost(requestParameters: ItemsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.itemsPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ItemsDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type ItemsDeletePreferEnum = typeof ItemsDeletePreferEnum[keyof typeof ItemsDeletePreferEnum];
/**
 * @export
 */
export const ItemsGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type ItemsGetPreferEnum = typeof ItemsGetPreferEnum[keyof typeof ItemsGetPreferEnum];
/**
 * @export
 */
export const ItemsPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type ItemsPatchPreferEnum = typeof ItemsPatchPreferEnum[keyof typeof ItemsPatchPreferEnum];
/**
 * @export
 */
export const ItemsPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type ItemsPostPreferEnum = typeof ItemsPostPreferEnum[keyof typeof ItemsPostPreferEnum];
