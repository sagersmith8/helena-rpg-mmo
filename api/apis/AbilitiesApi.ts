/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 13.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Abilities,
} from '../models/index';
import {
    AbilitiesFromJSON,
    AbilitiesToJSON,
} from '../models/index';

export interface AbilitiesDeleteRequest {
    id?: string;
    name?: string;
    description?: string;
    damage?: string;
    range?: string;
    manaCost?: string;
    cooldown?: string;
    requiredSkill?: string;
    requiredLevel?: string;
    requiredItem?: string;
    requiredQuantity?: string;
    image?: string;
    prefer?: AbilitiesDeletePreferEnum;
}

export interface AbilitiesGetRequest {
    id?: string;
    name?: string;
    description?: string;
    damage?: string;
    range?: string;
    manaCost?: string;
    cooldown?: string;
    requiredSkill?: string;
    requiredLevel?: string;
    requiredItem?: string;
    requiredQuantity?: string;
    image?: string;
    select?: string;
    order?: string;
    range2?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: AbilitiesGetPreferEnum;
}

export interface AbilitiesPatchRequest {
    id?: string;
    name?: string;
    description?: string;
    damage?: string;
    range?: string;
    manaCost?: string;
    cooldown?: string;
    requiredSkill?: string;
    requiredLevel?: string;
    requiredItem?: string;
    requiredQuantity?: string;
    image?: string;
    prefer?: AbilitiesPatchPreferEnum;
    abilities?: Abilities;
}

export interface AbilitiesPostRequest {
    select?: string;
    prefer?: AbilitiesPostPreferEnum;
    abilities?: Abilities;
}

/**
 * 
 */
export class AbilitiesApi extends runtime.BaseAPI {

    /**
     */
    async abilitiesDeleteRaw(requestParameters: AbilitiesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['damage'] != null) {
            queryParameters['damage'] = requestParameters['damage'];
        }

        if (requestParameters['range'] != null) {
            queryParameters['range'] = requestParameters['range'];
        }

        if (requestParameters['manaCost'] != null) {
            queryParameters['mana_cost'] = requestParameters['manaCost'];
        }

        if (requestParameters['cooldown'] != null) {
            queryParameters['cooldown'] = requestParameters['cooldown'];
        }

        if (requestParameters['requiredSkill'] != null) {
            queryParameters['required_skill'] = requestParameters['requiredSkill'];
        }

        if (requestParameters['requiredLevel'] != null) {
            queryParameters['required_level'] = requestParameters['requiredLevel'];
        }

        if (requestParameters['requiredItem'] != null) {
            queryParameters['required_item'] = requestParameters['requiredItem'];
        }

        if (requestParameters['requiredQuantity'] != null) {
            queryParameters['required_quantity'] = requestParameters['requiredQuantity'];
        }

        if (requestParameters['image'] != null) {
            queryParameters['image'] = requestParameters['image'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/abilities`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async abilitiesDelete(requestParameters: AbilitiesDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.abilitiesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async abilitiesGetRaw(requestParameters: AbilitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Abilities>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['damage'] != null) {
            queryParameters['damage'] = requestParameters['damage'];
        }

        if (requestParameters['range'] != null) {
            queryParameters['range'] = requestParameters['range'];
        }

        if (requestParameters['manaCost'] != null) {
            queryParameters['mana_cost'] = requestParameters['manaCost'];
        }

        if (requestParameters['cooldown'] != null) {
            queryParameters['cooldown'] = requestParameters['cooldown'];
        }

        if (requestParameters['requiredSkill'] != null) {
            queryParameters['required_skill'] = requestParameters['requiredSkill'];
        }

        if (requestParameters['requiredLevel'] != null) {
            queryParameters['required_level'] = requestParameters['requiredLevel'];
        }

        if (requestParameters['requiredItem'] != null) {
            queryParameters['required_item'] = requestParameters['requiredItem'];
        }

        if (requestParameters['requiredQuantity'] != null) {
            queryParameters['required_quantity'] = requestParameters['requiredQuantity'];
        }

        if (requestParameters['image'] != null) {
            queryParameters['image'] = requestParameters['image'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range2'] != null) {
            headerParameters['Range'] = String(requestParameters['range2']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/abilities`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AbilitiesFromJSON));
    }

    /**
     */
    async abilitiesGet(requestParameters: AbilitiesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Abilities> | null | undefined > {
        const response = await this.abilitiesGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async abilitiesPatchRaw(requestParameters: AbilitiesPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['damage'] != null) {
            queryParameters['damage'] = requestParameters['damage'];
        }

        if (requestParameters['range'] != null) {
            queryParameters['range'] = requestParameters['range'];
        }

        if (requestParameters['manaCost'] != null) {
            queryParameters['mana_cost'] = requestParameters['manaCost'];
        }

        if (requestParameters['cooldown'] != null) {
            queryParameters['cooldown'] = requestParameters['cooldown'];
        }

        if (requestParameters['requiredSkill'] != null) {
            queryParameters['required_skill'] = requestParameters['requiredSkill'];
        }

        if (requestParameters['requiredLevel'] != null) {
            queryParameters['required_level'] = requestParameters['requiredLevel'];
        }

        if (requestParameters['requiredItem'] != null) {
            queryParameters['required_item'] = requestParameters['requiredItem'];
        }

        if (requestParameters['requiredQuantity'] != null) {
            queryParameters['required_quantity'] = requestParameters['requiredQuantity'];
        }

        if (requestParameters['image'] != null) {
            queryParameters['image'] = requestParameters['image'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/abilities`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AbilitiesToJSON(requestParameters['abilities']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async abilitiesPatch(requestParameters: AbilitiesPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.abilitiesPatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async abilitiesPostRaw(requestParameters: AbilitiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/abilities`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AbilitiesToJSON(requestParameters['abilities']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async abilitiesPost(requestParameters: AbilitiesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.abilitiesPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const AbilitiesDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type AbilitiesDeletePreferEnum = typeof AbilitiesDeletePreferEnum[keyof typeof AbilitiesDeletePreferEnum];
/**
 * @export
 */
export const AbilitiesGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type AbilitiesGetPreferEnum = typeof AbilitiesGetPreferEnum[keyof typeof AbilitiesGetPreferEnum];
/**
 * @export
 */
export const AbilitiesPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type AbilitiesPatchPreferEnum = typeof AbilitiesPatchPreferEnum[keyof typeof AbilitiesPatchPreferEnum];
/**
 * @export
 */
export const AbilitiesPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type AbilitiesPostPreferEnum = typeof AbilitiesPostPreferEnum[keyof typeof AbilitiesPostPreferEnum];
