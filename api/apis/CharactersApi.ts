/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 13.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Characters,
} from '../models/index';
import {
    CharactersFromJSON,
    CharactersToJSON,
} from '../models/index';

export interface CharactersDeleteRequest {
    id?: string;
    name?: string;
    ancestry?: string;
    background?: string;
    classId?: string;
    level?: string;
    gold?: string;
    speed?: string;
    size?: string;
    experience?: string;
    health?: string;
    mana?: string;
    longitude?: string;
    latitude?: string;
    strength?: string;
    dexterity?: string;
    intelligence?: string;
    charisma?: string;
    wisdom?: string;
    constitution?: string;
    createdAt?: string;
    prefer?: CharactersDeletePreferEnum;
}

export interface CharactersGetRequest {
    id?: string;
    name?: string;
    ancestry?: string;
    background?: string;
    classId?: string;
    level?: string;
    gold?: string;
    speed?: string;
    size?: string;
    experience?: string;
    health?: string;
    mana?: string;
    longitude?: string;
    latitude?: string;
    strength?: string;
    dexterity?: string;
    intelligence?: string;
    charisma?: string;
    wisdom?: string;
    constitution?: string;
    createdAt?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: CharactersGetPreferEnum;
}

export interface CharactersPatchRequest {
    id?: string;
    name?: string;
    ancestry?: string;
    background?: string;
    classId?: string;
    level?: string;
    gold?: string;
    speed?: string;
    size?: string;
    experience?: string;
    health?: string;
    mana?: string;
    longitude?: string;
    latitude?: string;
    strength?: string;
    dexterity?: string;
    intelligence?: string;
    charisma?: string;
    wisdom?: string;
    constitution?: string;
    createdAt?: string;
    prefer?: CharactersPatchPreferEnum;
    characters?: Characters;
}

export interface CharactersPostRequest {
    select?: string;
    prefer?: CharactersPostPreferEnum;
    characters?: Characters;
}

/**
 * 
 */
export class CharactersApi extends runtime.BaseAPI {

    /**
     */
    async charactersDeleteRaw(requestParameters: CharactersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['ancestry'] != null) {
            queryParameters['ancestry'] = requestParameters['ancestry'];
        }

        if (requestParameters['background'] != null) {
            queryParameters['background'] = requestParameters['background'];
        }

        if (requestParameters['classId'] != null) {
            queryParameters['class_id'] = requestParameters['classId'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['gold'] != null) {
            queryParameters['gold'] = requestParameters['gold'];
        }

        if (requestParameters['speed'] != null) {
            queryParameters['speed'] = requestParameters['speed'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['experience'] != null) {
            queryParameters['experience'] = requestParameters['experience'];
        }

        if (requestParameters['health'] != null) {
            queryParameters['health'] = requestParameters['health'];
        }

        if (requestParameters['mana'] != null) {
            queryParameters['mana'] = requestParameters['mana'];
        }

        if (requestParameters['longitude'] != null) {
            queryParameters['longitude'] = requestParameters['longitude'];
        }

        if (requestParameters['latitude'] != null) {
            queryParameters['latitude'] = requestParameters['latitude'];
        }

        if (requestParameters['strength'] != null) {
            queryParameters['strength'] = requestParameters['strength'];
        }

        if (requestParameters['dexterity'] != null) {
            queryParameters['dexterity'] = requestParameters['dexterity'];
        }

        if (requestParameters['intelligence'] != null) {
            queryParameters['intelligence'] = requestParameters['intelligence'];
        }

        if (requestParameters['charisma'] != null) {
            queryParameters['charisma'] = requestParameters['charisma'];
        }

        if (requestParameters['wisdom'] != null) {
            queryParameters['wisdom'] = requestParameters['wisdom'];
        }

        if (requestParameters['constitution'] != null) {
            queryParameters['constitution'] = requestParameters['constitution'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/characters`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async charactersDelete(requestParameters: CharactersDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.charactersDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async charactersGetRaw(requestParameters: CharactersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Characters>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['ancestry'] != null) {
            queryParameters['ancestry'] = requestParameters['ancestry'];
        }

        if (requestParameters['background'] != null) {
            queryParameters['background'] = requestParameters['background'];
        }

        if (requestParameters['classId'] != null) {
            queryParameters['class_id'] = requestParameters['classId'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['gold'] != null) {
            queryParameters['gold'] = requestParameters['gold'];
        }

        if (requestParameters['speed'] != null) {
            queryParameters['speed'] = requestParameters['speed'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['experience'] != null) {
            queryParameters['experience'] = requestParameters['experience'];
        }

        if (requestParameters['health'] != null) {
            queryParameters['health'] = requestParameters['health'];
        }

        if (requestParameters['mana'] != null) {
            queryParameters['mana'] = requestParameters['mana'];
        }

        if (requestParameters['longitude'] != null) {
            queryParameters['longitude'] = requestParameters['longitude'];
        }

        if (requestParameters['latitude'] != null) {
            queryParameters['latitude'] = requestParameters['latitude'];
        }

        if (requestParameters['strength'] != null) {
            queryParameters['strength'] = requestParameters['strength'];
        }

        if (requestParameters['dexterity'] != null) {
            queryParameters['dexterity'] = requestParameters['dexterity'];
        }

        if (requestParameters['intelligence'] != null) {
            queryParameters['intelligence'] = requestParameters['intelligence'];
        }

        if (requestParameters['charisma'] != null) {
            queryParameters['charisma'] = requestParameters['charisma'];
        }

        if (requestParameters['wisdom'] != null) {
            queryParameters['wisdom'] = requestParameters['wisdom'];
        }

        if (requestParameters['constitution'] != null) {
            queryParameters['constitution'] = requestParameters['constitution'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/characters`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CharactersFromJSON));
    }

    /**
     */
    async charactersGet(requestParameters: CharactersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Characters> | null | undefined > {
        const response = await this.charactersGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async charactersPatchRaw(requestParameters: CharactersPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['ancestry'] != null) {
            queryParameters['ancestry'] = requestParameters['ancestry'];
        }

        if (requestParameters['background'] != null) {
            queryParameters['background'] = requestParameters['background'];
        }

        if (requestParameters['classId'] != null) {
            queryParameters['class_id'] = requestParameters['classId'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['gold'] != null) {
            queryParameters['gold'] = requestParameters['gold'];
        }

        if (requestParameters['speed'] != null) {
            queryParameters['speed'] = requestParameters['speed'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['experience'] != null) {
            queryParameters['experience'] = requestParameters['experience'];
        }

        if (requestParameters['health'] != null) {
            queryParameters['health'] = requestParameters['health'];
        }

        if (requestParameters['mana'] != null) {
            queryParameters['mana'] = requestParameters['mana'];
        }

        if (requestParameters['longitude'] != null) {
            queryParameters['longitude'] = requestParameters['longitude'];
        }

        if (requestParameters['latitude'] != null) {
            queryParameters['latitude'] = requestParameters['latitude'];
        }

        if (requestParameters['strength'] != null) {
            queryParameters['strength'] = requestParameters['strength'];
        }

        if (requestParameters['dexterity'] != null) {
            queryParameters['dexterity'] = requestParameters['dexterity'];
        }

        if (requestParameters['intelligence'] != null) {
            queryParameters['intelligence'] = requestParameters['intelligence'];
        }

        if (requestParameters['charisma'] != null) {
            queryParameters['charisma'] = requestParameters['charisma'];
        }

        if (requestParameters['wisdom'] != null) {
            queryParameters['wisdom'] = requestParameters['wisdom'];
        }

        if (requestParameters['constitution'] != null) {
            queryParameters['constitution'] = requestParameters['constitution'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/characters`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CharactersToJSON(requestParameters['characters']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async charactersPatch(requestParameters: CharactersPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.charactersPatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async charactersPostRaw(requestParameters: CharactersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/characters`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CharactersToJSON(requestParameters['characters']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async charactersPost(requestParameters: CharactersPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.charactersPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const CharactersDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type CharactersDeletePreferEnum = typeof CharactersDeletePreferEnum[keyof typeof CharactersDeletePreferEnum];
/**
 * @export
 */
export const CharactersGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type CharactersGetPreferEnum = typeof CharactersGetPreferEnum[keyof typeof CharactersGetPreferEnum];
/**
 * @export
 */
export const CharactersPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type CharactersPatchPreferEnum = typeof CharactersPatchPreferEnum[keyof typeof CharactersPatchPreferEnum];
/**
 * @export
 */
export const CharactersPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type CharactersPostPreferEnum = typeof CharactersPostPreferEnum[keyof typeof CharactersPostPreferEnum];
