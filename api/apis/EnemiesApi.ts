/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 13.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Enemies,
} from '../models/index';
import {
    EnemiesFromJSON,
    EnemiesToJSON,
} from '../models/index';

export interface EnemiesDeleteRequest {
    id?: string;
    name?: string;
    health?: string;
    mana?: string;
    experienceReward?: string;
    latitude?: string;
    longitude?: string;
    path?: string;
    step?: string;
    image?: string;
    prefer?: EnemiesDeletePreferEnum;
}

export interface EnemiesGetRequest {
    id?: string;
    name?: string;
    health?: string;
    mana?: string;
    experienceReward?: string;
    latitude?: string;
    longitude?: string;
    path?: string;
    step?: string;
    image?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: EnemiesGetPreferEnum;
}

export interface EnemiesPatchRequest {
    id?: string;
    name?: string;
    health?: string;
    mana?: string;
    experienceReward?: string;
    latitude?: string;
    longitude?: string;
    path?: string;
    step?: string;
    image?: string;
    prefer?: EnemiesPatchPreferEnum;
    enemies?: Enemies;
}

export interface EnemiesPostRequest {
    select?: string;
    prefer?: EnemiesPostPreferEnum;
    enemies?: Enemies;
}

/**
 * 
 */
export class EnemiesApi extends runtime.BaseAPI {

    /**
     */
    async enemiesDeleteRaw(requestParameters: EnemiesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['health'] != null) {
            queryParameters['health'] = requestParameters['health'];
        }

        if (requestParameters['mana'] != null) {
            queryParameters['mana'] = requestParameters['mana'];
        }

        if (requestParameters['experienceReward'] != null) {
            queryParameters['experience_reward'] = requestParameters['experienceReward'];
        }

        if (requestParameters['latitude'] != null) {
            queryParameters['latitude'] = requestParameters['latitude'];
        }

        if (requestParameters['longitude'] != null) {
            queryParameters['longitude'] = requestParameters['longitude'];
        }

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        if (requestParameters['step'] != null) {
            queryParameters['step'] = requestParameters['step'];
        }

        if (requestParameters['image'] != null) {
            queryParameters['image'] = requestParameters['image'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/enemies`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async enemiesDelete(requestParameters: EnemiesDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.enemiesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async enemiesGetRaw(requestParameters: EnemiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Enemies>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['health'] != null) {
            queryParameters['health'] = requestParameters['health'];
        }

        if (requestParameters['mana'] != null) {
            queryParameters['mana'] = requestParameters['mana'];
        }

        if (requestParameters['experienceReward'] != null) {
            queryParameters['experience_reward'] = requestParameters['experienceReward'];
        }

        if (requestParameters['latitude'] != null) {
            queryParameters['latitude'] = requestParameters['latitude'];
        }

        if (requestParameters['longitude'] != null) {
            queryParameters['longitude'] = requestParameters['longitude'];
        }

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        if (requestParameters['step'] != null) {
            queryParameters['step'] = requestParameters['step'];
        }

        if (requestParameters['image'] != null) {
            queryParameters['image'] = requestParameters['image'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/enemies`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EnemiesFromJSON));
    }

    /**
     */
    async enemiesGet(requestParameters: EnemiesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Enemies> | null | undefined > {
        const response = await this.enemiesGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async enemiesPatchRaw(requestParameters: EnemiesPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['health'] != null) {
            queryParameters['health'] = requestParameters['health'];
        }

        if (requestParameters['mana'] != null) {
            queryParameters['mana'] = requestParameters['mana'];
        }

        if (requestParameters['experienceReward'] != null) {
            queryParameters['experience_reward'] = requestParameters['experienceReward'];
        }

        if (requestParameters['latitude'] != null) {
            queryParameters['latitude'] = requestParameters['latitude'];
        }

        if (requestParameters['longitude'] != null) {
            queryParameters['longitude'] = requestParameters['longitude'];
        }

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        if (requestParameters['step'] != null) {
            queryParameters['step'] = requestParameters['step'];
        }

        if (requestParameters['image'] != null) {
            queryParameters['image'] = requestParameters['image'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/enemies`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EnemiesToJSON(requestParameters['enemies']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async enemiesPatch(requestParameters: EnemiesPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.enemiesPatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async enemiesPostRaw(requestParameters: EnemiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/enemies`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnemiesToJSON(requestParameters['enemies']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async enemiesPost(requestParameters: EnemiesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.enemiesPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const EnemiesDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type EnemiesDeletePreferEnum = typeof EnemiesDeletePreferEnum[keyof typeof EnemiesDeletePreferEnum];
/**
 * @export
 */
export const EnemiesGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type EnemiesGetPreferEnum = typeof EnemiesGetPreferEnum[keyof typeof EnemiesGetPreferEnum];
/**
 * @export
 */
export const EnemiesPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type EnemiesPatchPreferEnum = typeof EnemiesPatchPreferEnum[keyof typeof EnemiesPatchPreferEnum];
/**
 * @export
 */
export const EnemiesPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type EnemiesPostPreferEnum = typeof EnemiesPostPreferEnum[keyof typeof EnemiesPostPreferEnum];
