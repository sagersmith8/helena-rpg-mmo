/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 13.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Ancestries,
} from '../models/index';
import {
    AncestriesFromJSON,
    AncestriesToJSON,
} from '../models/index';

export interface AncestriesDeleteRequest {
    id?: string;
    name?: string;
    description?: string;
    bonusSpeed?: string;
    bonusHealth?: string;
    bonusMana?: string;
    baseSize?: string;
    bonusStrength?: string;
    bonusDexterity?: string;
    bonusIntelligence?: string;
    bonusCharisma?: string;
    bonusWisdom?: string;
    bonusConstitution?: string;
    bonusSkill?: string;
    image?: string;
    prefer?: AncestriesDeletePreferEnum;
}

export interface AncestriesGetRequest {
    id?: string;
    name?: string;
    description?: string;
    bonusSpeed?: string;
    bonusHealth?: string;
    bonusMana?: string;
    baseSize?: string;
    bonusStrength?: string;
    bonusDexterity?: string;
    bonusIntelligence?: string;
    bonusCharisma?: string;
    bonusWisdom?: string;
    bonusConstitution?: string;
    bonusSkill?: string;
    image?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: AncestriesGetPreferEnum;
}

export interface AncestriesPatchRequest {
    id?: string;
    name?: string;
    description?: string;
    bonusSpeed?: string;
    bonusHealth?: string;
    bonusMana?: string;
    baseSize?: string;
    bonusStrength?: string;
    bonusDexterity?: string;
    bonusIntelligence?: string;
    bonusCharisma?: string;
    bonusWisdom?: string;
    bonusConstitution?: string;
    bonusSkill?: string;
    image?: string;
    prefer?: AncestriesPatchPreferEnum;
    ancestries?: Ancestries;
}

export interface AncestriesPostRequest {
    select?: string;
    prefer?: AncestriesPostPreferEnum;
    ancestries?: Ancestries;
}

/**
 * 
 */
export class AncestriesApi extends runtime.BaseAPI {

    /**
     */
    async ancestriesDeleteRaw(requestParameters: AncestriesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['bonusSpeed'] != null) {
            queryParameters['bonus_speed'] = requestParameters['bonusSpeed'];
        }

        if (requestParameters['bonusHealth'] != null) {
            queryParameters['bonus_health'] = requestParameters['bonusHealth'];
        }

        if (requestParameters['bonusMana'] != null) {
            queryParameters['bonus_mana'] = requestParameters['bonusMana'];
        }

        if (requestParameters['baseSize'] != null) {
            queryParameters['base_size'] = requestParameters['baseSize'];
        }

        if (requestParameters['bonusStrength'] != null) {
            queryParameters['bonus_strength'] = requestParameters['bonusStrength'];
        }

        if (requestParameters['bonusDexterity'] != null) {
            queryParameters['bonus_dexterity'] = requestParameters['bonusDexterity'];
        }

        if (requestParameters['bonusIntelligence'] != null) {
            queryParameters['bonus_intelligence'] = requestParameters['bonusIntelligence'];
        }

        if (requestParameters['bonusCharisma'] != null) {
            queryParameters['bonus_charisma'] = requestParameters['bonusCharisma'];
        }

        if (requestParameters['bonusWisdom'] != null) {
            queryParameters['bonus_wisdom'] = requestParameters['bonusWisdom'];
        }

        if (requestParameters['bonusConstitution'] != null) {
            queryParameters['bonus_constitution'] = requestParameters['bonusConstitution'];
        }

        if (requestParameters['bonusSkill'] != null) {
            queryParameters['bonus_skill'] = requestParameters['bonusSkill'];
        }

        if (requestParameters['image'] != null) {
            queryParameters['image'] = requestParameters['image'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/ancestries`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ancestriesDelete(requestParameters: AncestriesDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ancestriesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ancestriesGetRaw(requestParameters: AncestriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Ancestries>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['bonusSpeed'] != null) {
            queryParameters['bonus_speed'] = requestParameters['bonusSpeed'];
        }

        if (requestParameters['bonusHealth'] != null) {
            queryParameters['bonus_health'] = requestParameters['bonusHealth'];
        }

        if (requestParameters['bonusMana'] != null) {
            queryParameters['bonus_mana'] = requestParameters['bonusMana'];
        }

        if (requestParameters['baseSize'] != null) {
            queryParameters['base_size'] = requestParameters['baseSize'];
        }

        if (requestParameters['bonusStrength'] != null) {
            queryParameters['bonus_strength'] = requestParameters['bonusStrength'];
        }

        if (requestParameters['bonusDexterity'] != null) {
            queryParameters['bonus_dexterity'] = requestParameters['bonusDexterity'];
        }

        if (requestParameters['bonusIntelligence'] != null) {
            queryParameters['bonus_intelligence'] = requestParameters['bonusIntelligence'];
        }

        if (requestParameters['bonusCharisma'] != null) {
            queryParameters['bonus_charisma'] = requestParameters['bonusCharisma'];
        }

        if (requestParameters['bonusWisdom'] != null) {
            queryParameters['bonus_wisdom'] = requestParameters['bonusWisdom'];
        }

        if (requestParameters['bonusConstitution'] != null) {
            queryParameters['bonus_constitution'] = requestParameters['bonusConstitution'];
        }

        if (requestParameters['bonusSkill'] != null) {
            queryParameters['bonus_skill'] = requestParameters['bonusSkill'];
        }

        if (requestParameters['image'] != null) {
            queryParameters['image'] = requestParameters['image'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/ancestries`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AncestriesFromJSON));
    }

    /**
     */
    async ancestriesGet(requestParameters: AncestriesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Ancestries> | null | undefined > {
        const response = await this.ancestriesGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async ancestriesPatchRaw(requestParameters: AncestriesPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['bonusSpeed'] != null) {
            queryParameters['bonus_speed'] = requestParameters['bonusSpeed'];
        }

        if (requestParameters['bonusHealth'] != null) {
            queryParameters['bonus_health'] = requestParameters['bonusHealth'];
        }

        if (requestParameters['bonusMana'] != null) {
            queryParameters['bonus_mana'] = requestParameters['bonusMana'];
        }

        if (requestParameters['baseSize'] != null) {
            queryParameters['base_size'] = requestParameters['baseSize'];
        }

        if (requestParameters['bonusStrength'] != null) {
            queryParameters['bonus_strength'] = requestParameters['bonusStrength'];
        }

        if (requestParameters['bonusDexterity'] != null) {
            queryParameters['bonus_dexterity'] = requestParameters['bonusDexterity'];
        }

        if (requestParameters['bonusIntelligence'] != null) {
            queryParameters['bonus_intelligence'] = requestParameters['bonusIntelligence'];
        }

        if (requestParameters['bonusCharisma'] != null) {
            queryParameters['bonus_charisma'] = requestParameters['bonusCharisma'];
        }

        if (requestParameters['bonusWisdom'] != null) {
            queryParameters['bonus_wisdom'] = requestParameters['bonusWisdom'];
        }

        if (requestParameters['bonusConstitution'] != null) {
            queryParameters['bonus_constitution'] = requestParameters['bonusConstitution'];
        }

        if (requestParameters['bonusSkill'] != null) {
            queryParameters['bonus_skill'] = requestParameters['bonusSkill'];
        }

        if (requestParameters['image'] != null) {
            queryParameters['image'] = requestParameters['image'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/ancestries`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AncestriesToJSON(requestParameters['ancestries']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ancestriesPatch(requestParameters: AncestriesPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ancestriesPatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ancestriesPostRaw(requestParameters: AncestriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/ancestries`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AncestriesToJSON(requestParameters['ancestries']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ancestriesPost(requestParameters: AncestriesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ancestriesPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const AncestriesDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type AncestriesDeletePreferEnum = typeof AncestriesDeletePreferEnum[keyof typeof AncestriesDeletePreferEnum];
/**
 * @export
 */
export const AncestriesGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type AncestriesGetPreferEnum = typeof AncestriesGetPreferEnum[keyof typeof AncestriesGetPreferEnum];
/**
 * @export
 */
export const AncestriesPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type AncestriesPatchPreferEnum = typeof AncestriesPatchPreferEnum[keyof typeof AncestriesPatchPreferEnum];
/**
 * @export
 */
export const AncestriesPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type AncestriesPostPreferEnum = typeof AncestriesPostPreferEnum[keyof typeof AncestriesPostPreferEnum];
