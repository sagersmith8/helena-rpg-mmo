/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 13.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Inventory,
} from '../models/index';
import {
    InventoryFromJSON,
    InventoryToJSON,
} from '../models/index';

export interface InventoryDeleteRequest {
    characterId?: string;
    itemId?: string;
    equipped?: string;
    quantity?: string;
    prefer?: InventoryDeletePreferEnum;
}

export interface InventoryGetRequest {
    characterId?: string;
    itemId?: string;
    equipped?: string;
    quantity?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: InventoryGetPreferEnum;
}

export interface InventoryPatchRequest {
    characterId?: string;
    itemId?: string;
    equipped?: string;
    quantity?: string;
    prefer?: InventoryPatchPreferEnum;
    inventory?: Inventory;
}

export interface InventoryPostRequest {
    select?: string;
    prefer?: InventoryPostPreferEnum;
    inventory?: Inventory;
}

/**
 * 
 */
export class InventoryApi extends runtime.BaseAPI {

    /**
     */
    async inventoryDeleteRaw(requestParameters: InventoryDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['characterId'] != null) {
            queryParameters['character_id'] = requestParameters['characterId'];
        }

        if (requestParameters['itemId'] != null) {
            queryParameters['item_id'] = requestParameters['itemId'];
        }

        if (requestParameters['equipped'] != null) {
            queryParameters['equipped'] = requestParameters['equipped'];
        }

        if (requestParameters['quantity'] != null) {
            queryParameters['quantity'] = requestParameters['quantity'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/inventory`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async inventoryDelete(requestParameters: InventoryDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.inventoryDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async inventoryGetRaw(requestParameters: InventoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Inventory>>> {
        const queryParameters: any = {};

        if (requestParameters['characterId'] != null) {
            queryParameters['character_id'] = requestParameters['characterId'];
        }

        if (requestParameters['itemId'] != null) {
            queryParameters['item_id'] = requestParameters['itemId'];
        }

        if (requestParameters['equipped'] != null) {
            queryParameters['equipped'] = requestParameters['equipped'];
        }

        if (requestParameters['quantity'] != null) {
            queryParameters['quantity'] = requestParameters['quantity'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/inventory`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InventoryFromJSON));
    }

    /**
     */
    async inventoryGet(requestParameters: InventoryGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Inventory> | null | undefined > {
        const response = await this.inventoryGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async inventoryPatchRaw(requestParameters: InventoryPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['characterId'] != null) {
            queryParameters['character_id'] = requestParameters['characterId'];
        }

        if (requestParameters['itemId'] != null) {
            queryParameters['item_id'] = requestParameters['itemId'];
        }

        if (requestParameters['equipped'] != null) {
            queryParameters['equipped'] = requestParameters['equipped'];
        }

        if (requestParameters['quantity'] != null) {
            queryParameters['quantity'] = requestParameters['quantity'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/inventory`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InventoryToJSON(requestParameters['inventory']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async inventoryPatch(requestParameters: InventoryPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.inventoryPatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async inventoryPostRaw(requestParameters: InventoryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/inventory`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InventoryToJSON(requestParameters['inventory']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async inventoryPost(requestParameters: InventoryPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.inventoryPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const InventoryDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type InventoryDeletePreferEnum = typeof InventoryDeletePreferEnum[keyof typeof InventoryDeletePreferEnum];
/**
 * @export
 */
export const InventoryGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type InventoryGetPreferEnum = typeof InventoryGetPreferEnum[keyof typeof InventoryGetPreferEnum];
/**
 * @export
 */
export const InventoryPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type InventoryPatchPreferEnum = typeof InventoryPatchPreferEnum[keyof typeof InventoryPatchPreferEnum];
/**
 * @export
 */
export const InventoryPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type InventoryPostPreferEnum = typeof InventoryPostPreferEnum[keyof typeof InventoryPostPreferEnum];
